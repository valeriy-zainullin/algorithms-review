// Сортировка по полярному углу.
// Все точки в первом и втором квадранте, сортируем их по
//   возрастанию угла направляющего вектора от выбранной
//   точки. Или, что то же самое, т.к. они в первых двух
//   квадрантах, по убыванию контангенса этого угла, можно
//   посчитать этот котангенс по координатам.
// Так мы получим обход против часовой, тогда ещё используем
//   предикат "правая тройка". Обычно пишу так, но в задаче
//   хотят обход по часовой, потому сортируем по убыванию
//   тангенса (теперь все точки в первом и четвертом
//   квадранте), по убыванию угла. И предикат используем не
//   "правая тройка", а "левая тройка".
// При совпадении углов нужно сортировать по расстоянию до
//   выбранной точки, иначе есть пример, когда алгоритм не
//   работает, он ниже. Ещё можно почитать об алгоритме по
//   ссылке: https://wcipeg.com/wiki/Convex_hull

// Сравнение в сортировке по полярному углу.
// p1_dy / p1_dx -> p1_tg
// p2_dy / p2_dx -> p2_tg.
// p1_tg > p2_tg.
// p1_dy / p1_dx > p2_dy / p2_dx.
// перенесём знак в p1_dy, p2_dy,
//   если p1_dx или p2_dx отрицательны.
//   Затем умножим обе части на p1_dx и p2_dx.
// (sign1 * p1_dy) p2_dx > (sign2 * p2_dy) p1_dx.
// Отдельно нужно разобрать случай, когда dx равен нулю.
// Тогда угол равен pi/2, т.к. выбрали самую нижнюю из самых левых.
//   Если бы были повторы, могли бы получить ещё одну точку, которая
//   совпадала бы с выбранной. Угол неизвестен. Мы бы просто всегда
//   её брали, если границы не входят в фигуру, или не брали бы,
//   удаляли бы повторы так же, если бы границы входили.
// При совпадении углов выбираем ближайшую, как уже обсудили.


// Замечание 1.
// Чтобы алгоритм создавал правильную оболочку в случае,
//   когда могут быть две точки с одним углом, нужно
//   выбирать либо упорядочивать по убыванию расстояния,
//   либо по возрастанию: если у нас есть две точки с
//   одним углом, ещё ок, а если три, то выберем среднюю,
//   затем пусть идет более дальняя, её возьмём, а затем
//   пусть более ближняя. Тогда она выкинет более дальнюю,
//   мы потеряем эту дальнюю точку. Потому при совпадении
//   углов (тангенсов), сортируем по расстоянию.

// Замечание 2.
// Пусть
//   p1 -- points_in_hull[points_in_hull.size()-2],
//   p2 -- points_in_hull[points_in_hull.size()-1],
//   p3 -- new_point.
// Если предыдущая точка ломает выпуклость,
//   т.е. угол от вектора (p1, p2) к вектору
//   (p2, p3) против часовой меньше pi, то
//   выбрасываем p2, она будет внутри выпуклой
//   оболочки, т.к. внутри треугольника
//   (selected_point, p1, p3).
// Если угол равен pi, тоже выбрасываем, точка на
//   границе считается внутри фигуры (если было бы
//   не так, включали бы), 
// Проверить это можно с помощью "псевдоскалярного"
//   произведения, ещё его называют предикатом
//   "правая тройка", а ещё это третья координата
//   векторного произведения.
